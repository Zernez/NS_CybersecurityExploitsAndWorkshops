#!/usr/bin/python3
import sys
import secrets
from scapy.all import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from secret_data import encryption_key

def encrypt(message: bytes) -> bytes:
    """Encrypt a message using our encryption key."""
    # generate a random IV
    iv = secrets.token_bytes(16)
    aes = AES.new(encryption_key, AES.MODE_CBC, iv=iv)
    # pad the plaintext to a multiple of the AES block size
    plaintext = pad(message, 16)
    # encrypt the padded plaintext
    ciphertext = aes.encrypt(plaintext)
    # return the iv concatenated to the ciphertext
    return iv + ciphertext

print("sending data to " + sys.argv[1] + "...")

def send_packet(dst, type, payload):
    encrypted = encrypt(payload.encode())
    ip = IP(dst="" + dst)
    icmp = ICMP(type=type)
    packet = ip / icmp / encrypted
    send(packet)

while(True):
    message = input()
    send_packet(sys.argv[1], 47, message)

