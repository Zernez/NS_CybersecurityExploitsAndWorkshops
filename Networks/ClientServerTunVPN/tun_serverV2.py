#!/usr/bin/python3
import fcntl
import struct
import os
import time
from scapy.all import *
from select import select
import ssl
import socket

IP_A = '0.0.0.0'
PORT= 9090

TUNSETIFF = 0x400454ca
IFF_TUN = 0x0001
IFF_TAP = 0x0002
IFF_NO_PI = 0x1000

# Create the tun interface
tun = os.open("/dev/net/tun", os.O_RDWR)
ifr = struct.pack('16sH', b'tun%d', IFF_TUN | IFF_NO_PI)
ifname_bytes = fcntl.ioctl(tun, TUNSETIFF, ifr)

# Get the interface name
ifname = ifname_bytes.decode('UTF-8')[:16].strip("\x00")
print("Interface Name: {}".format(ifname))

#Set up the tun interface
os.system("ip addr add 192.168.53.1/24 dev {}".format(ifname))
os.system("ip link set {} up".format(ifname))

#Create UDP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#if not ssl.HAS_TLSv1_3:
#    print("You have {}, we ONLY support TLS 1.3".format(ssl.OPENSSL_VERSION)
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
#context= ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
context.load_cert_chain('/volumes/cert/1000.pem', '/volumes/cert/modelintCA_key.pem')
#context.options |= (ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2)
sock.bind((IP_A, PORT))
#ssock= context.wrap_socket(sock, server_side=True)
sock.listen(8)
conn, addr= sock.accept()
ssock= context.wrap_socket(conn, server_side=True)
#fds = [ssock, tun]
#conn, addr = ssock.accept()
fds= [ssock, tun]
# Insert internal IP from Client
ip = '10.9.0.5'
port= 10000
i= 10000

while True:

    #This will block until least one socket is ready
    ready, _, _ = select(fds, [], [])
    for fd in ready:
        if fd is ssock:
            print("sock....")
            nsock= ssock.unwrap()
            data, (ip, port) = nsock.recv(40960)
            pkt = IP(data)
            print("{}:{} --> {}:{}".format(ip, port, IP_A, PORT))
            print("       Inside Tunnel: {} --> {}".format(pkt.src, pkt.dst))
            os.write(tun, data)

        if fd is tun:
            print ("tun....")
            packet = os.read(tun, 2048)
            pkt = IP(packet)
            print ("Return: {} --> {}".format(pkt.src,pkt.dst))
#            nsock= ssock.unwrap()
            ssock.sendto(packet, (ip, port))